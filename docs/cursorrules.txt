# Project Taric - Complete AI Agent Development Workspace Rules

## üö® CRITICAL: Multi-Project Virtual Environment Workflow

**Project Taric contains 3 separate projects, each with its own virtual environment:**

### üìÅ Project Structure Overview
```
Project Taric/
‚îú‚îÄ‚îÄ LoL_Data_MCP_Server/     # MCP server for League of Legends data
‚îÇ   ‚îî‚îÄ‚îÄ venv/               # Virtual environment for MCP server
‚îú‚îÄ‚îÄ Lol_Sim_Env/            # LoL simulation environment 
‚îÇ   ‚îî‚îÄ‚îÄ venv/               # Virtual environment for simulation
‚îú‚îÄ‚îÄ Taric_AI_Agent/         # AI agent that plays Taric
‚îÇ   ‚îî‚îÄ‚îÄ venv/               # Virtual environment for AI agent
‚îú‚îÄ‚îÄ PROJECT_OVERVIEW.md     # Complete project documentation
‚îî‚îÄ‚îÄ .cursorrules           # These workspace rules
```

### üîÑ **MANDATORY WORKFLOW - Before ANY Development:**

1. **IDENTIFY which project you're working on**
2. **NAVIGATE to that project's directory**: 
   - `cd LoL_Data_MCP_Server` OR
   - `cd Lol_Sim_Env` OR  
   - `cd Taric_AI_Agent`
3. **ACTIVATE that project's virtual environment**:
   - Windows: `.\venv\Scripts\Activate.ps1`
   - Unix: `source venv/bin/activate`
4. **VERIFY activation**: Look for `(venv)` in terminal prompt
5. **NEVER write code without proper venv activated**

### üö® **CRITICAL QUESTIONS RULE**

**When you have REALLY IMPORTANT questions about the project or during task execution:**

- **YOU CAN ASK QUESTIONS even if it stops the generation progress**
- **Important questions include:**
  - Architecture decisions that affect multiple components
  - Unclear requirements that could lead to wrong implementation
  - Breaking changes that might affect existing functionality
  - Technical approach questions when multiple valid options exist
  - Data model or API design questions
  - Integration concerns with existing systems
- **When to ask**: If the question is critical for correct implementation
- **How to ask**: Stop generation, ask the question clearly, wait for clarification
- **Priority**: Getting the right answer is more important than continuous generation

**Example scenarios where you SHOULD ask:**
- "I'm not sure if this new API should be REST or GraphQL - this affects the entire architecture"
- "Should I modify the existing ChampionService or create a new one? This impacts all existing tools"
- "The task mentions 'extend the ability tool' but I see multiple ways to do this - which approach do you prefer?"

**Remember**: It's better to ask and get it right than to implement the wrong solution.

### üéØ **TASK-BASED DEVELOPMENT WORKFLOW**

#### Before Starting ANY Development Task:

1. **üìã ANALYZE THE TASK**
   - Read the task description completely
   - Understand requirements and acceptance criteria
   - Check dependencies and prerequisites
   - Identify which files/modules will be affected

2. **üß† USE SEQUENTIAL THINKING FOR COMPLEX TASKS**
   - **When to use**: Multi-step tasks, complex analysis, planning with uncertainty
   - **CRITICAL**: Always explain what you're thinking and planning to the user
   - **Show your work**: Use sequential thinking but explain your approach first
   - **Example**: "I'll use sequential thinking to break down this complex task and plan the implementation steps"
   - **Stay visible**: Don't just use the tool - communicate your process
   - **‚ö†Ô∏è CODE VISIBILITY**: When using sequential thinking, always show code to user BEFORE implementing since normal accept/reject workflow is different

### üß† **MANDATORY PRE-COMMIT SEQUENTIAL THINKING VALIDATION**

**üö® CRITICAL RULE**: Before every commit and push to GitHub, ALWAYS use sequential thinking to validate your work.

#### **Why This Is Essential:**
- **Prevents false confidence**: Initial tests may pass but miss integration issues
- **Catches missing connections**: Code may work in isolation but fail when integrated
- **Identifies overlooked dependencies**: Changes may break unrelated functionality  
- **Validates end-to-end functionality**: Ensures complete workflows actually work
- **Prevents production issues**: Catches problems before they reach users

#### **Sequential Thinking Pre-Commit Process:**
1. **Review all changes made** - What files were modified and why?
2. **Check integration points** - Do the changes properly connect with existing systems?
3. **Validate assumptions** - Are there hidden dependencies or requirements we missed?
4. **Test end-to-end flows** - Do complete user workflows actually work?
5. **Identify potential gaps** - What could we have overlooked?
6. **Verify non-obvious connections** - Could this change affect seemingly unrelated functionality?

#### **Example Sequential Thinking Prompts:**
- "Use sequential thinking to review our configuration changes - did we miss any integration points?"
- "Review our new feature implementation with sequential thinking - are there hidden dependencies?"
- "Check our bug fixes using sequential thinking - could we have introduced new issues?"

#### **Red Flags That Require Sequential Thinking:**
- ‚úÖ Changes to configuration systems
- ‚úÖ Integration of multiple components
- ‚úÖ Updates to core functionality
- ‚úÖ Environment or deployment changes
- ‚úÖ Cross-project modifications
- ‚úÖ Complex refactoring tasks

3. **üèóÔ∏è CHECK & PLAN FOLDER STRUCTURE**
   - **BE FLEXIBLE**: Don't force exact folder structure from documentation
   - **USE EXISTING**: If there's a logical existing folder, use it
   - **CREATE WHEN NEEDED**: Only create new folders if absolutely necessary
   - **THINK LOGICALLY**: Place files where they make the most sense
   - **EXAMPLE**: If task says "create in `data_sources/` but there's already a `src/apis/` folder for API code, use `src/apis/`"

4. **üíª WRITE THE CODE**
   - **ALWAYS SHOW CODE FIRST**: Display the code you plan to write before implementing
   - **CRITICAL**: When using sequential thinking, user can't accept/reject - show code blocks clearly
   - **GET CONFIRMATION**: Ask user to confirm before proceeding with file edits
   - Follow the task requirements
   - Implement with proper error handling
   - Add comprehensive docstrings
   - Use type hints throughout

5. **üß™ TEST THE CODE**
   - Write unit tests for new functionality
   - Run existing tests to ensure no regressions
   - Test manually if needed
   - Ensure >80% test coverage

6. **üìö UPDATE DOCUMENTATION**
   - **ALWAYS update README.md** if folder structure changes
   - **ALWAYS update relevant .md files** in docs/ folder
   - **ADD CODE EXAMPLES** in documentation when appropriate
   - **KEEP DOCS CURRENT**: Documentation should always reflect reality

7. **üß† SEQUENTIAL THINKING VALIDATION & COMMIT**
   - **MANDATORY**: Use sequential thinking to review all changes and identify potential gaps
   - **Check for**: Missing integrations, overlooked dependencies, false assumptions
   - **Validate**: That fixes actually work end-to-end, not just in isolation
   - **Example prompt**: "Use sequential thinking to review our changes - did we miss something?"

8. **üöÄ COMMIT & PUSH TO GITHUB**
   - Stage all changes: `git add .`
   - Write descriptive commit message
   - Push to GitHub: `git push origin master`
   - Verify the push was successful

#### Example Task Development Flow:
```bash
# 1. Check the task (e.g., "Add champion data fetcher")
# 2. Plan: "This goes in data_sources/ or maybe existing src/apis/"
cd LoL_Data_MCP_Server
.\venv\Scripts\Activate.ps1

# 3. Check existing structure
ls src/
# Found: data_sources/ exists - use it!

# 4. Write code in src/data_sources/champion_fetcher.py
# 5. Write tests in tests/test_champion_fetcher.py
# 6. Update README.md and docs/architecture.md
# 7. Commit and push
git add .
git commit -m "Add champion data fetcher to data_sources module"
git push origin master
```

### üéØ **Project-Specific Guidelines**

#### LoL_Data_MCP_Server (MCP Protocol Data Provider)
- **Purpose**: Provides structured LoL data via MCP protocol
- **Tech Stack**: FastAPI, SQLAlchemy, Redis, BeautifulSoup, Selenium
- **Current Phase**: Phase 2 - MCP Server Foundation
- **Key Requirements**: 
  - Follow MCP protocol specification exactly
  - Use async/await for all I/O operations
  - Implement proper caching strategies
  - Maintain data accuracy and performance

#### Lol_Sim_Env (League of Legends Simulation Environment)
- **Purpose**: Realistic LoL game simulation for AI training
- **Tech Stack**: Gymnasium, PyGame, NumPy, Custom game logic
- **Current Phase**: Environment Foundation
- **Key Requirements**:
  - Implement accurate game mechanics
  - Provide proper state/action spaces
  - Ensure deterministic simulation
  - Optimize for training performance

#### Taric_AI_Agent (AI Agent Playing Taric)
- **Purpose**: Reinforcement learning agent that plays Taric champion
- **Tech Stack**: Stable-Baselines3, PyTorch/TensorFlow, Custom RL algorithms
- **Current Phase**: Agent Architecture Design
- **Key Requirements**:
  - Implement state representation from simulation
  - Design reward functions for support role
  - Train using appropriate RL algorithms
  - Integrate with simulation environment

### üìÅ **FOLDER STRUCTURE FLEXIBILITY RULES**

#### Core Principle: **LOGICAL PLACEMENT OVER RIGID STRUCTURE**

1. **üîç FIRST**: Check what folders already exist
2. **ü§î THINK**: Where does this logically belong?
3. **üìÇ USE**: Existing folders when they make sense
4. **üìù DOCUMENT**: Update README/docs when you make structural decisions

#### Common Flexibility Examples:
- **API clients** ‚Üí Could go in `data_sources/`, `apis/`, or `clients/`
- **Utilities** ‚Üí Could go in `utils/`, `helpers/`, or `common/`
- **Models** ‚Üí Could go in `models/`, `schemas/`, or `data_models/`
- **Tests** ‚Üí Always in `tests/` but mirror the source structure

#### When to Create New Folders:
- ‚úÖ When existing folders don't make logical sense
- ‚úÖ When you have 3+ related files that form a logical group
- ‚úÖ When project documentation specifically requires it
- ‚ùå Don't create for 1-2 files that fit elsewhere

### üîó **Inter-Project Dependencies**
- **Taric_AI_Agent** depends on **Lol_Sim_Env** for training environment
- **Lol_Sim_Env** uses **LoL_Data_MCP_Server** for accurate game data
- **All projects** share common LoL domain knowledge

### üêç **Universal Python Standards**
- Python 3.9+ across all projects
- Type hints mandatory (mypy checking)
- Docstrings for all functions and classes
- PEP 8 style (black formatting)
- Comprehensive error handling
- Async/await where applicable

### üß™ **Testing Requirements**
- pytest framework across all projects
- Unit tests for core functionality
- Integration tests for cross-project dependencies
- Maintain >80% test coverage
- Mock external dependencies appropriately

### üì¶ **Dependencies Management**
- Each project has its own requirements.txt
- Pin dependency versions for reproducibility
- Document cross-project version compatibility
- Regular dependency updates with testing

### üöÄ **Development Workflow Examples**

#### Working on MCP Server:
```bash
cd LoL_Data_MCP_Server
.\venv\Scripts\Activate.ps1  # Windows
# Verify: (venv) appears in prompt
# Now develop MCP server features
```

#### Working on Simulation Environment:
```bash
cd Lol_Sim_Env  
.\venv\Scripts\Activate.ps1  # Windows
# Verify: (venv) appears in prompt
# Now develop simulation features
```

#### Working on AI Agent:
```bash
cd Taric_AI_Agent
.\venv\Scripts\Activate.ps1  # Windows  
# Verify: (venv) appears in prompt
# Now develop agent features
```

### üîç **Code Quality Checklist**
Before any commit to ANY project:
- [ ] **Correct virtual environment is active**
- [ ] **Currently in correct project directory**
- [ ] **Task analyzed and understood completely**
- [ ] **Folder structure decision documented**
- [ ] Tests pass: `pytest`
- [ ] Code formatted: `black .`
- [ ] Type checking: `mypy .`
- [ ] Linting: `flake8 .`
- [ ] Import sorting: `isort .`
- [ ] **README.md updated** if structure changed
- [ ] **Relevant .md files updated** in docs/
- [ ] **üß† SEQUENTIAL THINKING VALIDATION**: Use sequential thinking to review all changes before pushing to GitHub
- [ ] **Committed and pushed to GitHub**

### üìö **DOCUMENTATION UPDATE REQUIREMENTS**

#### Always Update When:
- ‚úÖ **Folder structure changes** ‚Üí Update README.md
- ‚úÖ **New modules added** ‚Üí Update architecture docs
- ‚úÖ **API endpoints change** ‚Üí Update API documentation  
- ‚úÖ **Dependencies change** ‚Üí Update requirements and docs
- ‚úÖ **Configuration changes** ‚Üí Update setup instructions

#### Documentation Files to Maintain:
- **README.md** (each project) - Project overview and setup
- **docs/*.md** files - Detailed technical documentation
- **PROJECT_OVERVIEW.md** (workspace level) - High-level project relationships
- **Code comments** - Inline documentation for complex logic

### üìã **Project Status Tracking**
- **LoL_Data_MCP_Server**: Phase 1 - Basic MCP implementation
- **Lol_Sim_Env**: Foundation - Core environment structure  
- **Taric_AI_Agent**: Planning - Agent architecture design

### üéØ **Current Development Priority**
1. **LoL_Data_MCP_Server**: Implement basic MCP tools (get_champion_data, etc.)
2. **Lol_Sim_Env**: Design core game state representation
3. **Taric_AI_Agent**: Define observation/action spaces

### üõ†Ô∏è **CURSOR MCP SERVERS USAGE RULE**

#### **MCP SERVERS WITH FALLBACK STRATEGY**:

**üö® CRITICAL**: Use MCP servers strategically with a clear fallback hierarchy, since Cursor doesn't provide accept/reject options for MCP file edits.

#### **USAGE HIERARCHY - FOLLOW THIS ORDER**:

**1Ô∏è‚É£ PRIMARY: Use Standard Tools First**
- `edit_file`, `search_replace`, `read_file`, `list_dir` for file operations
- `codebase_search`, `grep_search`, `file_search` for finding content
- `run_terminal_cmd` for system operations

**2Ô∏è‚É£ SECONDARY: Use Context7 MCP for Documentation (Always Preferred)**
- Use Context7 MCP for documentation lookups (preferred over web search)
- Use other MCP servers for specialized data access

**3Ô∏è‚É£ FALLBACK: Use Filesystem MCP When Standard Tools Fail**
- **ONLY when standard tools cannot find files or fail to work**
- **ONLY when you get "file not found" or timeout errors**
- **STILL avoid MCP editing** (no accept/reject in Cursor)

#### **Available MCP Servers Usage**:

1. **üìÅ FILESYSTEM MCP** (mcp_filesystem_*):
   - ‚úÖ **Primary use**: Fallback when standard tools fail to find/read files
   - ‚úÖ **Use for**: File reading, directory operations, file searching, batch reading
   - ‚ö†Ô∏è **FALLBACK ONLY**: When `read_file`, `list_dir` fail or timeout
   - ‚ùå **NEVER use for**: File writing, file editing, file creation, file deletion
   - ‚úÖ **Benefits**: More robust file finding, better error handling, batch operations

2. **üìö CONTEXT7 MCP** (mcp_context7_*):
   - ‚úÖ **Primary use**: Library documentation, package information, API references
   - ‚úÖ **Always prefer over**: Manual documentation search or web search
   - ‚úÖ **Benefits**: Up-to-date docs, accurate API info, library compatibility

3. **üîç OTHER MCP SERVERS**:
   - ‚úÖ **Use when available**: For specialized data (LoL data, etc.)
   - ‚úÖ **Prefer MCP**: Over standard tools when functionality overlaps
   - ‚úÖ **Combine**: Use multiple MCP servers together when beneficial

#### **MCP Server Priority Order**:
1. **üéØ PRIMARY**: Use standard tools (`read_file`, `edit_file`, `search_replace`, `list_dir`)
2. **üîç SECONDARY**: Use Context7 MCP for documentation (always preferred over web search)
3. **‚ö†Ô∏è FALLBACK**: Use Filesystem MCP only when standard tools fail or timeout
4. **üåê LAST RESORT**: Use web search only when no other options work

#### **When to Use Each MCP Server**:

**üìÅ FILESYSTEM MCP FOR (FALLBACK ONLY)**:
- **ONLY when standard tools fail**: "file not found", timeouts, or errors
- **Batch operations**: When you need to read many files at once and standard tools struggle
- **Complex directory operations**: When `list_dir` times out or fails
- **Robust file searching**: When `file_search` or `grep_search` don't work
- **NEVER for editing**: Still avoid `mcp_filesystem_write_file` or `mcp_filesystem_edit_file`

**üìö CONTEXT7 MCP FOR**:
- **ALWAYS for documentation**: Library docs, API references, package info
- **PREFER over web search**: More accurate and up-to-date information
- **Framework guidance**: Version compatibility, best practices
- **IMMEDIATE USE**: Don't try standard tools first for documentation

#### **FALLBACK STRATEGY EXAMPLES**:

**‚úÖ CORRECT FALLBACK USAGE**:
```
# 1. Try standard tools first
read_file("src/services/champion_service.py", ...)
# ‚Üí If you get "file not found" or timeout

# 2. Then fallback to MCP
mcp_filesystem_read_file({"path": "src/services/champion_service.py"})
```

**‚úÖ WHEN TO USE FILESYSTEM MCP FALLBACK**:
- `read_file` returns "Could not find file" error
- `list_dir` times out after 5+ seconds  
- `file_search` returns no results but you know files exist
- Multiple standard tools fail in sequence
- Working with large directory structures that cause timeouts

**‚ùå DON'T USE FILESYSTEM MCP AS PRIMARY**:
```
# DON'T start with MCP
mcp_filesystem_read_file({"path": "file.py"})  # Try standard tools first!

# DON'T use MCP for editing
mcp_filesystem_edit_file({"path": "file.py", "edits": [...]})  # Still no accept/reject!
```

**‚úÖ DOCUMENTATION: ALWAYS USE CONTEXT7 MCP FIRST**:
```
# For documentation, skip standard tools and go straight to MCP
mcp_context7_resolve_library_id({"libraryName": "fastapi"})
# DON'T try web_search first for documentation
```

### üö® **NEVER FORGET**
- **Each project = Separate directory + Separate venv**
- **Always verify correct venv before coding**
- **Analyze task completely before starting**
- **Be flexible with folder structure - use logic over rigid rules**
- **Always update documentation when structure changes**
- **Test thoroughly before committing**
- **üß† MANDATORY: Use sequential thinking to validate ALL changes before pushing to GitHub**
- **Cross-project changes require testing in all affected projects**
- **Commit and push to GitHub after each completed task**
- **Refer to PROJECT_OVERVIEW.md for complete context**

### üìö **Documentation References**
- **MCP Protocol**: https://spec.modelcontextprotocol.io/
- **LoL Wiki**: https://wiki.leagueoflegends.com/en-us/
- **Riot API**: https://developer.riotgames.com/
- **Gymnasium**: https://gymnasium.farama.org/
- **Stable-Baselines3**: https://stable-baselines3.readthedocs.io/